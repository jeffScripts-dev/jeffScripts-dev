local library = {}

function library:CreateWindow(title)
    local window = {}

    -- ScreenGui
    local gui = Instance.new("ScreenGui")
    gui.Name = title
    gui.ResetOnSpawn = false
    gui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    -- Main Frame
    local main = Instance.new("Frame")
    main.Size = UDim2.new(0, 500, 0, 350)
    main.Position = UDim2.new(0.5, -250, 0.5, -175)
    main.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    main.BorderSizePixel = 0
    main.Parent = gui

    -- Top Bar
    local top = Instance.new("Frame")
    top.Size = UDim2.new(1, 0, 0, 40)
    top.BackgroundColor3 = Color3.fromRGB(180, 0, 0)
    top.Parent = main

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 1, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.new(1, 1, 1)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 18
    titleLabel.Parent = top

    -- Drag
    local UIS = game:GetService("UserInputService")
    local dragging, dragStart, startPos

    top.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = main.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    -- Tab System
    local tabs = {}
    local buttons = {}

    function window:CreateTab(tabName)
        local tab = {}

        -- Tab Button
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(0, 100, 0, 30)
        button.Position = UDim2.new(0, (#buttons) * 110, 0, 45)
        button.BackgroundColor3 = Color3.fromRGB(50, 0, 0)
        button.Text = tabName
        button.TextColor3 = Color3.new(1, 1, 1)
        button.Font = Enum.Font.Gotham
        button.TextSize = 14
        button.Parent = main
        table.insert(buttons, button)

        -- Content Frame
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, -20, 1, -90)
        frame.Position = UDim2.new(0, 10, 0, 80)
        frame.BackgroundColor3 = Color3.fromRGB(35, 0, 0)
        frame.Visible = #tabs == 0 -- Primeira aba vis√≠vel
        frame.Parent = main

        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 5)
        layout.Parent = frame

        -- Alternar visibilidade
        button.MouseButton1Click:Connect(function()
            for _, v in pairs(tabs) do
                v.Visible = false
            end
            frame.Visible = true
        end)

        table.insert(tabs, frame)

        -- Componentes

        function tab:CreateButton(text, callback)
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(1, -10, 0, 30)
            btn.BackgroundColor3 = Color3.fromRGB(70, 0, 0)
            btn.Text = text
            btn.TextColor3 = Color3.new(1, 1, 1)
            btn.Font = Enum.Font.Gotham
            btn.TextSize = 14
            btn.Parent = frame

            btn.MouseButton1Click:Connect(callback)
        end

        function tab:CreateToggle(text, default, callback)
            local toggle = Instance.new("TextButton")
            toggle.Size = UDim2.new(1, -10, 0, 30)
            toggle.BackgroundColor3 = Color3.fromRGB(70, 0, 0)
            toggle.Text = text .. ": " .. (default and "ON" or "OFF")
            toggle.TextColor3 = Color3.new(1, 1, 1)
            toggle.Font = Enum.Font.Gotham
            toggle.TextSize = 14
            toggle.Parent = frame

            local state = default

            toggle.MouseButton1Click:Connect(function()
                state = not state
                toggle.Text = text .. ": " .. (state and "ON" or "OFF")
                callback(state)
            end)
        end

        function tab:CreateSlider(text, min, max, default, callback)
            local holder = Instance.new("Frame")
            holder.Size = UDim2.new(1, -10, 0, 50)
            holder.BackgroundColor3 = Color3.fromRGB(70, 0, 0)
            holder.Parent = frame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, 0, 0, 20)
            label.BackgroundTransparency = 1
            label.Text = text .. ": " .. default
            label.TextColor3 = Color3.new(1, 1, 1)
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.Parent = holder

            local slider = Instance.new("TextButton")
            slider.Size = UDim2.new(1, 0, 0, 20)
            slider.Position = UDim2.new(0, 0, 0, 25)
            slider.BackgroundColor3 = Color3.fromRGB(50, 0, 0)
            slider.Text = ""
            slider.Parent = holder

            local fill = Instance.new("Frame")
            fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            fill.BackgroundColor3 = Color3.fromRGB(180, 0, 0)
            fill.BorderSizePixel = 0
            fill.Parent = slider

            local dragging = false

            slider.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)

            slider.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            game:GetService("UserInputService").InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local rel = (input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X
                    rel = math.clamp(rel, 0, 1)
                    fill.Size = UDim2.new(rel, 0, 1, 0)

                    local value = math.floor(rel * (max - min) + min)
                    label.Text = text .. ": " .. value
                    callback(value)
                end
            end)
        end

        return tab
    end

    return window
end

return library
